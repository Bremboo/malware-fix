# import main Flask class and request object
from flask import Flask, request

import mysql.connector
from packaging import version
import json
import os
import logging

class Database():
    def __init__(self):
        self.MYSQL_HOST     = os.getenv("MYSQL_HOST")
        self.MYSQL_PORT     = os.getenv("MYSQL_PORT")
        self.MYSQL_DATABASE = os.getenv("MYSQL_DATABASE")
        self.MYSQL_USER     = os.getenv("MYSQL_USER")
        self.MYSQL_PASSWORD = os.getenv("MYSQL_PASSWORD")

        logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(message)s")

    def connect(self):
        db = mysql.connector.connect(host=self.MYSQL_HOST, database=self.MYSQL_DATABASE, user=self.MYSQL_USER, password=self.MYSQL_PASSWORD, port=self.MYSQL_PORT)
        return db

    def get_plugin(self, plugin):
        db = self.connect()
        cursor = db.cursor()
        sql = f"SELECT * FROM `patchstack` WHERE `record_type` = 'plugin' AND `slug` = '{plugin}'"
        cursor.execute(sql)
        results = cursor.fetchall()
        return results

    def get_theme(self, theme):
        db = self.connect()
        cursor = db.cursor()
        sql = f"SELECT * FROM `patchstack` WHERE `record_type` = 'theme' AND `slug` = '{theme}'"
        cursor.execute(sql)
        results = cursor.fetchall()
        return results

    def check_core_vulnerability(self, version):
        db = self.connect()
        cursor = db.cursor()
        sql = f"SELECT * FROM `patchstack` WHERE `record_type` = 'wordpress'"
        cursor.execute(sql)
        results = cursor.fetchall()
        return results

    def api_log(self, endpoint, data):
        db = self.connect()
        cursor = db.cursor()

        sql = f"INSERT INTO `api_log` (`id`, `time`, `api_endpoint`, `api_data`) VALUES (NULL, CURRENT_TIMESTAMP, '{endpoint}', '{db.converter.escape(data)}')"

        logging.debug(db.converter.escape(data))

        cursor.execute(sql)
        db.commit()

# create the Flask app
app = Flask(__name__)

@app.route("/core", methods=["GET", "POST"])
def core():
    # handle the POST request
    if request.method == "POST":

        core = request.get_data().decode("utf-8")
        core_result = "="*85+"\n"
        core_result += f"{'WordPress':<50} {'Version':<10} {'Vulnerability (count)':<10}\n"
        core_result += "="*85+"\n"

        database = Database()
        database.api_log("core", json.dumps({"version": request.get_data().decode("utf-8")}))

        core_info = database.check_core_vulnerability(core)

        core_vulnerability = False
        for core_row in core_info:
            if version.parse(core) <= version.parse(core_row[4]):
                core_vulnerability += 1
            else:
                pass

        vulnerability_status = ("VULNERABLE ("+str(core_vulnerability)+")" if core_vulnerability >= 1 else "")
        core_result += f"{'WordPress core':<50} {core:<10} {vulnerability_status:<10}"
        core_result += "\n"
        core_result += "="*85+"\n"

        return core_result

    if request.method == "GET":
        return "This endpoint expects a POST request with JSON"

@app.route("/plugins", methods=["GET", "POST"])
def plugins():
    # handle the POST request
    if request.method == "POST":

        database = Database()
        database.api_log("plugins", request.get_data().decode("utf-8"))

        plugins = request.get_json()
        plugins_result = "="*85+"\n"
        plugins_result += f"{'Plugin name':<50} {'Version':<10} {'Vulnerability (count)':<10}\n"
        plugins_result += "="*85+"\n"

        for plugin in plugins:
            plugin_info = database.get_plugin(plugin["name"])

            plugin_vulnerability = False
            for plugin_row in plugin_info:
                if version.parse(plugin["version"]) <= version.parse(plugin_row[4]):
                    plugin_vulnerability += 1
                else:
                    pass

            vulnerability_status = ("VULNERABLE ("+str(plugin_vulnerability)+")" if plugin_vulnerability >= 1 else "")
            plugins_result += f"{plugin['name']:<50} {plugin['version']:<10} {vulnerability_status:<10}"
            plugins_result += "\n"

        plugins_result += "="*85+"\n"
        return plugins_result

    if request.method == "GET":
        return "This endpoint expects a POST request with JSON"

@app.route("/themes", methods=["GET", "POST"])
def themes():
    if request.method == "POST":

        database = Database()
        database.api_log("themes", request.get_data().decode("utf-8"))

        themes = request.get_json()
        themes_result = "="*85+"\n"
        themes_result += f"{'Theme name':<50} {'Version':<10} {'Vulnerability (count)':<10}\n"
        themes_result += "="*85+"\n"

        for theme in themes:
            theme_info = database.get_theme(theme["name"])

            theme_vulnerability = False
            for theme_row in theme_info:
                if version.parse(theme["version"]) <= version.parse(theme_row[4]):
                    theme_vulnerability += 1
                else:
                    pass

            vulnerability_status = ("VULNERABLE ("+str(theme_vulnerability)+")" if theme_vulnerability >= 1 else "")
            themes_result += f"{theme['name']:<50} {theme['version']:<10} {vulnerability_status:<10}"
            themes_result += "\n"

        themes_result += "="*85+"\n"
        return themes_result

    if request.method == "GET":
        return "This endpoint expects a POST request with JSON"

if __name__ == "__main__":
    app.run(host="0.0.0.0", debug=True, port=5000)
