# import main Flask class and request object
from flask import Flask, request
from packaging import version

import json
import sqlite3
import os
import logging

class Database():
    """

    """

    def __init__(self, database="iskander.db"):
        logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(message)s")
        self.DATABASE = database

    def connect(self):
        try:
            connection = sqlite3.connect(self.DATABASE)
            return connection
        except:
            raise Exception("Unable to open database")

    def get_plugin(self, plugin):
        try:
            connection = self.connect()
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM patchstack WHERE record_type = 'plugin' AND slug = ?", (plugin, ))
            results = cursor.fetchall()
            connection.close()
            return results
        except:
            raise Exception("Unable to get plugin vulnerabilities")

    def get_theme(self, theme):
        try:
            connection = self.connect()
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM patchstack WHERE record_type = 'theme' AND slug = ?", (theme, ))
            results = cursor.fetchall()
            connection.close()
            return results
        except:
            raise Exception("Unable to get theme vulnerabilities")

    def check_core_vulnerability(self, version):
        try:
            connection = self.connect()
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM patchstack WHERE record_type = 'wordpress' AND version = ?", (version, ))
            results = cursor.fetchall()
            connection.close()
            return results
        except:
            raise Exception("Unable to get core vulnerabilities")

    def get_latest(self, limit=20):
        db = self.connect()
        cursor = db.cursor()
        cursor.execute("SELECT * FROM patchstack  ORDER BY report_date DESC LIMIT 0, ?", (limit, ))
        results = cursor.fetchall()
        logging.debug(results)
        return results

app = Flask(__name__)

@app.route("/core", methods=["GET", "POST"])
def core():
    if request.headers.get("Response-Type") == "table":
        core = request.get_data().decode("utf-8")

        core_result = "="*85+"\n"
        core_result += f"{'WordPress':<50} {'Version':<10} {'Vulnerability (count)':<10}\n"
        core_result += "="*85+"\n"

        database = Database()

        logging.debug(core)
        core_info = database.check_core_vulnerability(str(core))

        core_vulnerability = False
        for core_row in core_info:
            if version.parse(core) <= version.parse(core_row[4]):
                core_vulnerability += 1
            else:
                pass

        vulnerability_status = ("VULNERABLE ("+str(core_vulnerability)+")" if core_vulnerability >= 1 else "")

        core_result += f"{'WordPress core':<50} {core:<10} {vulnerability_status:<10}"
        core_result += "\n"
        core_result += "="*85+"\n"

        return core_result

    if request.method == "GET":
        return "This endpoint expects a POST request with JSON"

@app.route("/plugins", methods=["GET", "POST"])
def plugins():
    if request.headers.get("Response-Type") == "table":
        database = Database()

        plugins = request.get_json()
        plugins_result = "="*85+"\n"
        plugins_result += f"{'Plugin name':<50} {'Version':<10} {'Vulnerability (count)':<10}\n"
        plugins_result += "="*85+"\n"

        for plugin in plugins:
            plugin_info = database.get_plugin(plugin["name"])

            plugin_vulnerability = False
            for plugin_row in plugin_info:
                if version.parse(plugin["version"]) <= version.parse(plugin_row[4]):
                    plugin_vulnerability += 1
                else:
                    pass

            vulnerability_status = ("VULNERABLE ("+str(plugin_vulnerability)+")" if plugin_vulnerability >= 1 else "")

            plugins_result += f"{plugin['name']:<50} {plugin['version']:<10} {vulnerability_status:<10}"
            plugins_result += "\n"

        plugins_result += "="*85+"\n"

        return plugins_result

    if request.method == "GET":
        return "This endpoint expects a POST request with JSON"

@app.route("/themes", methods=["GET", "POST"])
def themes():
    if request.headers.get("Response-Type") == "table":
        database = Database()

        themes = request.get_json()
        themes_result = "="*85+"\n"
        themes_result += f"{'Theme name':<50} {'Version':<10} {'Vulnerability (count)':<10}\n"
        themes_result += "="*85+"\n"

        for theme in themes:
            theme_info = database.get_theme(theme["name"])

            theme_vulnerability = False
            for theme_row in theme_info:
                if version.parse(theme["version"]) <= version.parse(theme_row[4]):
                    theme_vulnerability += 1
                else:
                    pass

            vulnerability_status = ("VULNERABLE ("+str(theme_vulnerability)+")" if theme_vulnerability >= 1 else "")

            themes_result += f"{theme['name']:<50} {theme['version']:<10} {vulnerability_status:<10}"
            themes_result += "\n"

        themes_result += "="*85+"\n"
        return themes_result

    if request.method == "GET":
        return "This endpoint expects a POST request with JSON"

@app.route("/latest", methods=["GET"])
def latest():
    if request.method == "GET":
        database = Database()
        logging.debug(database.get_latest(30))

        try:
            database = Database()
            latest = database.get_latest(30)
            latest_dict = { "success": True, "results": [] }

            for row in latest:
                latest_dict["results"].append({
                                            "id": row[0],
                                            "type": row[1],
                                            "slug": row[2],
                                            "name": row[3],
                                            "version": row[4],
                                            "date": row[5],
                                            "vulnerability": row[6],
                                            "cvss": row[7]
                                            })
            return latest_dict

        except:
            return {"success": False}

if __name__ == "__main__":
    app.run(host="0.0.0.0", debug=True, port=5000)
