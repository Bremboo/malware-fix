# Graylog module for Iskander
# Export from Graylog:
# timestamp source username hapi_request_id ctxt_result

# Dependencies
import argparse
import csv
import json
import logging
from packaging import version
import sqlite3
import time

class Iskander():
	pass

class Graylog(Iskander):
	"""
	CSV parser for Graylog to find vulnerable plugins and themes
	"""

	def __init__(self, csv_file, csv_out=False):
		logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(message)s")

		self.CSV_FILE = csv_file
		self.CSV_OUT = csv_out if csv_out else False
		self.parse_csv()

	def parse_csv(self):
		plugins_dict = dict()

		logging.info("CSV parsing started")

		try:
			with open(self.CSV_FILE) as file:
				# https://flutterq.com/solved-python-csv-error-line-contains-null-byte/
				csv_reader = csv.reader((line.replace('\0','') for line in file))
				next(csv_reader)
				for row in csv_reader:
					for ctxt_result in {row[4]}:
						try:
							plugins = json.loads(ctxt_result)
							for plugin in plugins:
								if plugin["name"] not in plugins_dict:
									plugins_dict[plugin["name"]] = {}

								if plugin["version"] not in plugins_dict[plugin["name"]]:
									plugins_dict[plugin["name"]][plugin["version"]] = set()

								plugins_dict[plugin["name"]][plugin["version"]].add(row[2])

						except json.decoder.JSONDecodeError:
							pass

		except FileNotFoundError:
			logging.warning("No valid input file specified")

		logging.info("CSV parsing finished")
		self.CSV_DATA = plugins_dict

	def check_vulnerable_plugins_patchstack(self, slug_search=None, usernames_log=False, threshold=0, cvss=0):
		connection = sqlite3.connect("iskander.db")
		header = ["slug", "name", "affected", "current", "version", "date", "cvss", "description"]
		print(f"{header[0]:<50} {header[1]:<50} {header[2]:<10} {header[3]:<10} {header[4]:<10} {header[5]:<15} {header[6]:<10} {header[7]:<10}")

		data = self.CSV_DATA
		if slug_search:
			data = { slug: slug_data for slug, slug_data in data.items() if slug == slug_search }

		### CSV output to file 
		if self.CSV_OUT:
			with open(self.CSV_OUT, mode="w") as csv_file:
				csv_data = csv.writer(csv_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
				csv_data.writerow(["slug", "plugin_name", "incident_count", "current_version", "affected_version", "report_date", "cvss", "vulnerability"])

		for plugin_slug, plugin_versions in data.items():
			# Sorts the list of versions based on the number of affected usernames
			sorted_order = sorted(plugin_versions.keys(), key=lambda u: len(plugin_versions[u]), reverse=True)
			plugin_versions_sorted = [ v for v in sorted_order ]

			# For plugin_version in plugin_versions:
			for plugin_version in plugin_versions_sorted:
				try:
					cursor = connection.cursor()
					cursor.execute("SELECT * FROM patchstack WHERE record_type = 'plugin' AND slug = ?", (plugin_slug, ))
					results = cursor.fetchall()
				except:
					logging.debug("Database error")
					results = []

				for result in results:
					cvss = result[7] if result[7] != None else ""
					if version.parse(plugin_version) <= version.parse(result[4]):
						if len(plugin_versions[plugin_version]) >= threshold:
							print(f"{result[2]:<50} {result[3]:<50} {len(plugin_versions[plugin_version]):<10} {plugin_version:<10} {result[4]:<10} {result[5]:<15} {cvss:<10} {result[6]:<10}")

							### Usernames
							if usernames_log:
								usernames = plugin_versions[plugin_version]
								print(f"AFFECTED: {len(plugin_versions[plugin_version])}")
								for affected_username in usernames:
									print(f"{affected_username:>20}")
								print("*"*100)

							### CSV output to file
							if self.CSV_OUT:
								with open(self.CSV_OUT, mode="a") as csv_file:
									csv_data = csv.writer(csv_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
									csv_data.writerow([result[2], result[3], len(plugin_versions[plugin_version]), plugin_version, result[4], result[5], cvss, result[6]])

	def check_vulnerable_themes(self, usernames_log=False, threshold=0):
		for theme, theme_versions in self.CSV_DATA.items():
			try:
				with open(self.VULNS_THEMES+theme) as file:
					json_data = json.loads(file.read())
					for vuln in json_data["data"]["vulnerabilities"]:
						for theme_version, usernames in theme_versions.items():
							if version.parse(theme_version) < version.parse(vuln["fixed_in"]):
								affected_usernames = [user for user in usernames]
								affected_usernames_count = str(len(affected_usernames))

								if len(affected_usernames) >= threshold:
									print(f"{theme:<50} {theme_version:<15} INCIDENT COUNT: {affected_usernames_count:<5} {vuln['title']:<50}")

									# Print affected usernames
									if usernames_log:
										print(f"AFFECTED: {affected_usernames_count}")
										for affected_username in affected_usernames:
											print(f"{affected_username:>20}")
										print("*"*100)
			except:
				pass

if __name__ == "__main__":

	# Searching example:
	# python3 graylog.py --csv ../plugins_all.csv --type plugins --threshold 100 --cvss 5.0
	arguments = argparse.ArgumentParser(prog="graylog.py",
										description="Detects vulnerabilities in WordPress plugins and themes based on Graylog's CSV log")

	arguments.add_argument("--csv", dest="CSV_FILE", help="Specify input file", required=True)
	arguments.add_argument("--type", dest="TYPE", help="Specify scan type: plugins, themes", required=True)
	arguments.add_argument("--usernames", dest="USERNAMES", action="store_true", help="Specify if usernames should be shown")
	arguments.add_argument("--threshold", dest="THRESHOLD", type=int, default=1, help="Specify incident threshold")
	arguments.add_argument("--cvss", dest="CSVV", type=float, default=1, help="Specify incident threshold")
	arguments.add_argument("--slug", dest="SLUG", type=str, help="Specify slug")


	# Output parameters
	arguments.add_argument("--csv-out", dest="CSVOUT", help="Write output to CSV file")

	args = arguments.parse_args()

	if args.TYPE == "plugins":
		wpvuln = Graylog(args.CSV_FILE, (args.CSVOUT if args.CSVOUT else False))
		wpvuln.check_vulnerable_plugins_patchstack(slug_search=args.SLUG, usernames_log=args.USERNAMES, threshold=args.THRESHOLD, cvss=args.CSVV)
	elif args.TYPE == "themes":
		wpvuln = Graylog(args.CSV_FILE)
		wpvuln.check_vulnerable_themes(usernames_log=args.USERNAMES, threshold=args.THRESHOLD)
	else:
		logging.warning("No valid input type specified")
