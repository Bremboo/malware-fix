from bs4 import BeautifulSoup
import os
import re
import json
import mysql.connector
import logging
import time
import argparse
import requests

class WordPress:
	def core_to_sha1(self):
		pass

	def plugin_to_sha1(self):
		pass

	def themes_to_sha1(self):
		pass

class WPVULNDB:
	def filter_plugins(self, html):
		pass

	def filter_themes(self, html):
		pass

class Patchstack:

	def __init__(self):
		logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(message)s")

	def filter_plugins(self, html):
		plugins = {}
		soup = BeautifulSoup(html, "html.parser")
		for article in soup.find_all("article"):
			slug = article.a["href"].split("/")[-1]

			lines = article.text.split("\n")
			non_empty_lines = [line for line in lines if line.strip() != ""]

			# Sanitise data and remove spaces
			if len(non_empty_lines) == 4:
				data = {"plugin_name": 			non_empty_lines[0].strip(),
						"vulnerability": 		"",
						"affected_version": 	non_empty_lines[2].strip(),
						"report_date": 			non_empty_lines[3].strip()
						}

				plugin = {"name": non_empty_lines[0].strip(),
						  "version": non_empty_lines[2].replace("<=", "").strip(),
						  "report_date": non_empty_lines[3].strip(),
						  "vulnerability": "",
						  "record_type": non_empty_lines[1].strip().lower()}

				if slug not in plugins:
					plugins[slug] = [plugin]
				else:
					plugins[slug].append(plugin)

			elif len(non_empty_lines) == 5:
				plugin_name = non_empty_lines[0].strip()
				vuln = non_empty_lines[1].strip()
				report_type = non_empty_lines[2].strip()
				plugin_version = non_empty_lines[3].strip()
				vuln_date = non_empty_lines[4].strip()

				data = {"plugin_name": 			non_empty_lines[0].strip(),
						"vulnerability": 		non_empty_lines[1].strip(),
						"affected_version": 	non_empty_lines[3].strip(),
						"report_date": 			non_empty_lines[4].strip()
						}

				plugin = {"name": non_empty_lines[0].strip(),
						  "version": non_empty_lines[3].strip().replace("<=", "").strip(),
						  "report_date": non_empty_lines[4].strip(),
						  "vulnerability": non_empty_lines[1].strip(),
						  "record_type": non_empty_lines[2].strip().lower()}

				if slug not in plugins:
					plugins[slug] = [plugin]
				else:
					plugins[slug].append(plugin)

			elif len(non_empty_lines) == 9:
				plugin_name = non_empty_lines[0].strip()

				data = {"plugin_name": 			non_empty_lines[0].strip(),
						"vulnerability": 		non_empty_lines[3].strip(),
						"score": 				non_empty_lines[2].strip(),
						"vulnerability_scope": 	non_empty_lines[1].strip(),
						"affected_version": 	non_empty_lines[7].strip(),
						"report_date": 			non_empty_lines[8].strip()
						}

				plugin = {"name": non_empty_lines[0].strip(),
						  "version": non_empty_lines[7].strip().replace("<=", "").strip(),
						  "report_date": non_empty_lines[8].strip(),
						  "vulnerability": non_empty_lines[3].strip(),
						  "score": non_empty_lines[2].strip(),
						  "record_type": non_empty_lines[6].strip().lower()}

				if slug not in plugins:
					plugins[slug] = [plugin]
				else:
					plugins[slug].append(plugin)

			else:
				raise SystemExit

		return plugins

	def filter_plugins_page(self, page):
		headers = {
			'authority': 'patchstack.com',
			'cache-control': 'max-age=0',
			'sec-ch-ua': '" Not;A Brand";v="99", "Google Chrome";v="97", "Chromium";v="97"',
			'sec-ch-ua-mobile': '?0',
			'sec-ch-ua-platform': '"macOS"',
			'upgrade-insecure-requests': '1',
			'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36',
			'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
			'sec-fetch-site': 'same-origin',
			'sec-fetch-mode': 'navigate',
			'sec-fetch-user': '?1',
			'sec-fetch-dest': 'document',
			'accept-language': 'en-GB,en;q=0.9,en-US;q=0.8,et;q=0.7,es;q=0.6',
			'cookie': 'INSERT_COOKIE',
		}
		params = (
			('search', ''),
			('page', page),
			('type', 'all'),
			('exact', 'false'),
			)
		response = requests.get("https://patchstack.com/database/", headers=headers, params=params)

		return response.text

class Database():

	def __init__(self, host, user, password, database, port=3306):
		self.HOST	 = host
		self.USER	 = user
		self.PASSWORD = password
		self.DATABASE = database
		self.PORT	 = port
		pass

	def add_patchstack_plugin(self, record_type, slug, name, version, report_date, vulnerability, score=None):
		"""

		"""

		name = name.replace("'", "")
		vulnerability = vulnerability.replace("'", "")

		db = mysql.connector.connect(host=self.HOST, database=self.DATABASE, user=self.USER, password=self.PASSWORD, port=self.PORT)

		cursor = db.cursor()
		sql = f"SELECT * FROM `patchstack` WHERE `slug` LIKE '{slug}' AND `name` LIKE '{name}' AND `version` LIKE '{version}' AND `report_date` LIKE '{report_date}' AND `vulnerability` LIKE '{vulnerability}'"
		cursor.execute(sql)
		results = cursor.fetchall()

		if len(results) == 0:
			logging.info("Instance does not exist - adding...")
			if score != None:
				self.add_patchstack_plugin_record(record_type, slug, name, version, report_date, vulnerability, score)
			else:
				self.add_patchstack_plugin_record(record_type, slug, name, version, report_date, vulnerability)
		else:
			logging.info("Instance exists - skipping...")

	def add_patchstack_plugin_record(self, record_type, slug, name, version, report_date, vulnerability, score=None):
		name = name.replace("'", "")
		vulnerability = vulnerability.replace("'", "")

		db = mysql.connector.connect(host=self.HOST, database=self.DATABASE, user=self.USER, password=self.PASSWORD, port=self.PORT)

		cursor = db.cursor()
		if score != None:
			sql = f"INSERT INTO patchstack (record_type, slug, name, version, report_date, vulnerability, score) VALUES ('{record_type}', '{slug}', '{name}', '{version}', '{report_date}', '{vulnerability}', '{score}')"

			logging.info(sql)
			cursor.execute(sql)
		else:
			sql = f"INSERT INTO patchstack (record_type, slug, name, version, report_date, vulnerability) VALUES ('{record_type}', '{slug}', '{name}', '{version}', '{report_date}', '{vulnerability}')"
			logging.info(sql)
			cursor.execute(sql)
		db.commit()

if __name__ == "__main__":

# Inserting data from Patchstack:
# python3 database.py --source patchstack --host 127.0.0.1 --user db_user --password db_user_pass --database app_db --port 6033
	arguments = argparse.ArgumentParser(prog="database.py",
										description="Populates Iskander database with data from various sources")

	arguments.add_argument("--host", dest="host", help="Iskander hostname", required=True)
	arguments.add_argument("--user", dest="user", help="Iskander username", required=True)
	arguments.add_argument("--password", dest="password", help="Iskander password", required=True)
	arguments.add_argument("--database", dest="database", help="Iskander database", required=True)
	arguments.add_argument("--port", dest="port", help="Iskander database port", required=True)
	arguments.add_argument("--source", dest="source", help="Data source", required=True)
	arguments.add_argument("--page", dest="page", type=int, help="Page number")
	arguments.add_argument("--pages", dest="pages", type=int, help="Page number")

	args = arguments.parse_args()

	# Patchstack
	if args.source == "patchstack":
		patchstack = Patchstack()

		# Multiple pages from folder
		# Specify --source patchstack
		if args.page is None and args.pages is None:
			html = ""
			for filename in os.listdir("data_patchstack"):
				with open(os.path.join("data_patchstack", filename), 'r') as f:
					try:
						html += f.read()
					except UnicodeDecodeError:
						pass
			plugins = patchstack.filter_plugins(html)

			database = Database(args.host, args.user, args.password, args.database, args.port)
			for plugin_slug, plugin_data in plugins.items():
				for plugin in plugin_data:
					try:
						database.add_patchstack_plugin(plugin['record_type'], plugin_slug, plugin['name'], plugin['version'], plugin['report_date'], plugin['vulnerability'], plugin["score"])
					except KeyError:
						database.add_patchstack_plugin(plugin['record_type'], plugin_slug, plugin['name'], plugin['version'], plugin['report_date'], plugin['vulnerability'])
		# Single page
		# Specify page number with --page n
		elif args.page:
			html = patchstack.filter_plugins_page(args.page)
			plugins = patchstack.filter_plugins(html)

			database = Database(args.host, args.user, args.password, args.database, args.port)
			for plugin_slug, plugin_data in plugins.items():
				for plugin in plugin_data:
					try:
						database.add_patchstack_plugin(plugin['record_type'], plugin_slug, plugin['name'], plugin['version'], plugin['report_date'], plugin['vulnerability'], plugin["score"])
					except KeyError:
						database.add_patchstack_plugin(plugin['record_type'], plugin_slug, plugin['name'], plugin['version'], plugin['report_date'], plugin['vulnerability'])

		# Multiple pages
		# Specify end page number with --pages n
		elif args.pages:
			html = ""
			for page in reversed(range(1, args.pages+1)):
				html += patchstack.filter_plugins_page(page)
				time.sleep(3)

			plugins = patchstack.filter_plugins(html)
			database = Database(args.host, args.user, args.password, args.database, args.port)
			for plugin_slug, plugin_data in plugins.items():
				for plugin in plugin_data:
					try:
						database.add_patchstack_plugin(plugin["record_type"], plugin_slug, plugin["name"], plugin["version"], plugin["report_date"], plugin["vulnerability"], plugin["score"])
					except KeyError:
						database.add_patchstack_plugin(plugin["record_type"], plugin_slug, plugin["name"], plugin["version"], plugin["report_date"], plugin["vulnerability"])

		# No condition, exiting
		else:
			raise SystemError

	# Wpvulndb
	elif args.DATABASE == "wpvulndb":
		pass

	# End of options
	else:
		pass
